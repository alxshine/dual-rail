type = struct CPUARMState {
    uint32_t regs[16];
    uint64_t xregs[32];
    uint64_t pc;
    uint32_t pstate;
    uint32_t aarch64;
    uint32_t uncached_cpsr;
    uint32_t spsr;
    uint64_t banked_spsr[8];
    uint32_t banked_r13[8];
    uint32_t banked_r14[8];
    uint32_t usr_regs[5];
    uint32_t fiq_regs[5];
    uint32_t CF;
    uint32_t VF;
    uint32_t NF;
    uint32_t ZF;
    uint32_t QF;
    uint32_t GE;
    uint32_t thumb;
    uint32_t condexec_bits;
    uint64_t daif;
    uint64_t elr_el[4];
    uint64_t sp_el[4];
    struct {
        uint32_t c0_cpuid;
        union {...};
        union {...};
        uint64_t cpacr_el1;
        uint64_t cptr_el[4];
        uint32_t c1_xscaleauxcr;
        uint64_t sder;
        uint32_t nsacr;
        union {...};
        union {...};
        uint64_t vttbr_el2;
        TCR tcr_el[4];
        TCR vtcr_el2;
        uint32_t c2_data;
        uint32_t c2_insn;
        union {...};
        uint32_t pmsav5_data_ap;
        uint32_t pmsav5_insn_ap;
        uint64_t hcr_el2;
        uint64_t scr_el3;
        union {...};
        union {...};
        uint32_t c6_region[8];
        union {...};
        uint64_t hpfar_el2;
        uint64_t hstr_el2;
        union {...};
        uint32_t c9_insn;
        uint32_t c9_data;
        uint64_t c9_pmcr;
        uint64_t c9_pmcnten;
        uint64_t c9_pmovsr;
        uint64_t c9_pmuserenr;
        uint64_t c9_pmselr;
        uint64_t c9_pminten;
        union {...};
        union {...};
        uint32_t mvbar;
        struct {...};
        union {...};
        union {...};
        uint64_t tpidrurw_s;
        uint64_t tpidrprw_s;
        uint64_t tpidruro_s;
        union {...};
        uint64_t c14_cntfrq;
        uint64_t c14_cntkctl;
        uint32_t cnthctl_el2;
        uint64_t cntvoff_el2;
        ARMGenericTimer c14_timer[4];
        uint32_t c15_cpar;
        uint32_t c15_ticonfig;
        uint32_t c15_i_max;
        uint32_t c15_i_min;
        uint32_t c15_threadid;
        uint32_t c15_config_base_address;
        uint32_t c15_diagnostic;
        uint32_t c15_power_diagnostic;
        uint32_t c15_power_control;
        uint64_t dbgbvr[16];
        uint64_t dbgbcr[16];
        uint64_t dbgwvr[16];
        uint64_t dbgwcr[16];
        uint64_t mdscr_el1;
        uint64_t oslsr_el1;
        uint64_t mdcr_el2;
        uint64_t mdcr_el3;
        uint64_t c15_ccnt;
        uint64_t pmccfiltr_el0;
        uint64_t vpidr_el2;
        uint64_t vmpidr_el2;
    } cp15;
    struct {
        uint32_t other_sp;
        uint32_t other_ss_msp;
        uint32_t other_ss_psp;
        uint32_t vecbase[2];
        uint32_t basepri[2];
        uint32_t control[2];
        uint32_t ccr[2];
        uint32_t cfsr[2];
        uint32_t hfsr;
        uint32_t dfsr;
        uint32_t sfsr;
        uint32_t mmfar[2];
        uint32_t bfar;
        uint32_t sfar;
        unsigned int mpu_ctrl[2];
        int exception;
        uint32_t primask[2];
        uint32_t faultmask[2];
        uint32_t aircr;
        uint32_t secure;
        uint32_t csselr[2];
        uint32_t scr[2];
        uint32_t msplim[2];
        uint32_t psplim[2];
    } v7m;
    struct {
        uint32_t syndrome;
        uint32_t fsr;
        uint64_t vaddress;
        uint32_t target_el;
    } exception;
    struct {
        uint8_t pending;
        uint8_t has_esr;
        uint64_t esr;
    } serror;
    uint32_t irq_line_state;
    uint32_t teecr;
    uint32_t teehbr;
    struct {
        ARMVectorReg zregs[32];
        uint32_t xregs[16];
        int vec_len;
        int vec_stride;
        uint32_t scratch[8];
        float_status fp_status;
        float_status fp_status_f16;
        float_status standard_fp_status;
        uint64_t zcr_el[4];
    } vfp;
    uint64_t exclusive_addr;
    uint64_t exclusive_val;
    uint64_t exclusive_high;
    struct {
        uint64_t regs[16];
        uint64_t val;
        uint32_t cregs[16];
    } iwmmxt;
    struct CPUBreakpoint *cpu_breakpoint[16];
    struct CPUWatchpoint *cpu_watchpoint[16];
    struct {
        <no data fields>
    } end_reset_fields;
    CPUTLBCommon tlb_c;
    CPUTLBDesc tlb_d[8];
    CPUTLBEntry tlb_table[8][256];
    CPUTLBEntry tlb_v_table[8][8];
    CPUIOTLBEntry iotlb[8][256];
    CPUIOTLBEntry iotlb_v[8][8];
    uint64_t features;
    struct {
        uint32_t *drbar;
        uint32_t *drsr;
        uint32_t *dracr;
        uint32_t rnr[2];
    } pmsav7;
    struct {
        uint32_t *rbar[2];
        uint32_t *rlar[2];
        uint32_t mair0[2];
        uint32_t mair1[2];
    } pmsav8;
    struct {
        uint32_t *rbar;
        uint32_t *rlar;
        uint32_t rnr;
        uint32_t ctrl;
    } sau;
    void *nvic;
    const struct arm_boot_info *boot_info;
    void *gicv3state;
} *
